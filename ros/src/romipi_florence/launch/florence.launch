<?xml version="1.0" ?>

<!-- simulate example robot with example controller in the challenge scenario -->

<launch>

  <!-- include file="$(find romipi_fake)/launch/romipi_fake.launch" / -->

  <!-- launch Gazebo in the Group Challenge world -->
  <!-- use `roslaunch farscope_example_robot_simulate use_gui:=false` to turn off Gazebo GUI -->
  <arg name="use_gui" default="true" />
  <arg name="paused" default="true" />
  <include file="$(find romipi_florence)/launch/florence_gazebo.launch">
    <arg name="gui" value="$(arg use_gui)" />
    <arg name="paused" value="$(arg paused)" />
  </include>
  
  <!-- need a robot state publisher to translate joints into TF information -->
  <!-- node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /-->

  <!-- Map server provided map source -->
  <!--arg name="map_file" default="$(find farscope_project_entry)/maps/sim_map.yaml"/>
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="map"/>
  </node-->

  <!-- Hector mapping -->
  <!-- include file="$(find farscope_project_entry)/launch/hector_mapping.launch" / -->
  
  <!-- AMCL localisation algorithm -->
  <!-- include file="$(find farscope_project_entry)/launch/amcl.launch" /-->
  
  <!-- The path planning stuff -->
  <!-- include file="$(find farscope_project_entry)/launch/path_plan_and_move_base.launch" / -->

  <!-- Base controller -->
  <!-- node name="robot_base_controller" pkg="farscope_project_entry" type="florence_base_controller.py" output="screen"/ -->

</launch>
